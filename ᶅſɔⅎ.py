import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader
import torch.nn.functional as F
from transformers import AutoTokenizer as ត្សីងអៃចថស្ក

ចាកាពអុភាល = 512 # ſɟᴜ ſɭᴜɘ ꞁȷ̀ɜ ſȷᴜͷ̗
ផ៏នអេត្សារា = 1e-4 # ʃэc̗ ꞁȷ̀ɔ ſᶘᴜ ɽ͑ʃ'ᴜ
ហាសិក៏ហ៏ = 24 # j͑ʃɹ ſɭэ ֭ſɭэ
កេភពាល៏ = 556 # j͑ʃп́ɔ ſɭɔʞ ſןᴜ j͐ʃэ
ចាកអុភាល = 512  # ſɟᴜƽ ꞁȷ̀ɜ ſȷᴜͷ̗
ចាកអុភាលត្លាកាក = 512  # ſɟᴜƽ ꞁȷ̀ɜ ſȷᴜͷ̗ ſ̀ȷᴜ ſɭᴜƽ ꞁȷ̀ᴜꞇ
តុម៏នីត្លា = 2  # ɭʃɜ ŋᷠэ }ʃꞇ ſ̀ȷᴜ j͑ʃᴜꞇ

# ſɭʞɹ ſɟᴜ j͑ʃ'ɔɔ˞ ꞁȷ̀ɔ j͑ʃƽɔƽ
ចាថេសអេស្កេក = ត្សីងអៃចថស្ក.from_pretrained("ı],ᴜ ſ͕ɭᴜ j͑ʃᴜꞇ ꞁȷ̀ɔ j͑ʃƽɔƽ")
អារាចាថុពិ = [
    "ꞁȷ̀ɜ ı],ɹ ſןɔ ᶅſᴜ\ꞁȷ̀ɜ ı],ɹ ſןɔ ᶅſᴜ.txt",
    "ꞁȷ̀ɜ ı],ɹ ſןɔ ᶅſᴜ\ꞁȷ̀ꞇ }ʃᴜƽ ꞁȷ̀ɜ ı],ɹ ſןɔ ᶅſᴜ.txt",
    "ꞁȷ̀ɜ ı],ɹ ſןɔ ᶅſᴜ\ı],ɹ ŋᷠɔ ſɭᴜꞇ }ʃɔ.txt",
    "ꞁȷ̀ɜ ı],ɹ ſןɔ ᶅſᴜ\ſɭɔ ſȷɜⅎ.txt",
    "ꞁȷ̀ɜ ı],ɹ ſןɔ ᶅſᴜ\j͑ʃп́ ꞁȷ̀ꞇ }ʃᴜƽ.txt",
    "ꞁȷ̀ɜ ı],ɹ ſןɔ ᶅſᴜ\j͑ʃƽᴜ ſɭɔʞ\ſɭɹ j͑ʃᴜ ŋᷠꞇ ɭʃᴜƴ ſɭɹ j͑ʃᴜ ŋᷠꞇ ɭʃᴜƴ ſɭɹ j͑ʃᴜ ŋᷠꞇ ɭʃᴜƴ.txt",
    "ꞁȷ̀ɜ ı],ɹ ſןɔ ᶅſᴜ\j͑ʃƽᴜ ſɭɔʞ\}ʃɔ ֭ſɭᴜ ı]ɹ ⺓ ſᶘᴜƴ ꞁȷ̀ᴜ }ʃꞇ.txt",
]

រឺថា = []

# j͑ʃ'ɔ ſȷᴜͷ̗
for ចាថុពិ in អារាចាថុពិ:
    with open(ចាថុពិ, "r", encoding="utf-8") as file:
        អុជិពេវា = file.read()
    ជាងាសៃអេស្កេក = ចាថេសអេស្កេក(អុជិពេវា, padding="max_length", truncation=False, max_length=2496)
    រឺថា.extend(ជាងាសៃអេស្កេក["input_ids"])

# ʃэ ֭ſɭɜ ᶅſɔ
សាជេសៃក្សាកា = ជាងាសៃអេស្កេក["input_ids"]
ចាថេសអារអេង្យិក = ជាងាសៃអេស្កេក["attention_mask"]

# ꞁȷ̀ɜ j͐ʃɹ ŋᷠꞇ }ʃꞇ
ពាល៏ថេរអេត្សារា = int(0.8 * len(សាជេសៃក្សាកា))
ពាល៏សិរអុលិមី = int(0.1 * len(សាជេសៃក្សាកា))
ពាល៏កេថេ = len(សាជេសៃក្សាកា) - ពាល៏ថេរអេត្សារា - ពាល៏សិរអុលិមី

ថុពិថេរអេត្សារា = សាជេសៃក្សាកា[:ពាល៏ថេរអេត្សារា]
ថុពិសិរអុលិមី = សាជេសៃក្សាកា[ពាល៏ថេរអេត្សារា:ពាល៏ថេរអេត្សារា + ពាល៏សិរអុលិមី]
ថុពិកេថេ = សាជេសៃក្សាកា[ពាល៏ថេរអេត្សារា + ពាល៏សិរអុលិមី:]

# ꞁȷ̀ᴜ ſᶘᴜ ſɭɜc̗ ꞁȷ̀ɔ ſ͕ɭᴎɹƽ ſןɹ j͑ʃɔ ថុពិថេរអេត្សារា
if len(ថុពិថេរអេត្សារា) > 0:
    class អារាហាថុពិ(Dataset):
        def __init__(self, ថុពិ):
            self.ថុពិ = ថុពិ
        def __len__(self):
            return len(self.ថុពិ)
        def __getitem__(self, idx):
            return self.ថុពិ[idx]

    # j͑ʃᴜ ֭ſɭᴜ ſᶘɹ ɭl̀ɜ
    ហាត្សិយុសៃថុពិ = អារាហាថុពិ(ថុពិថេរអេត្សារា)
    ហាត្សិយុសៃផ៏តេមិនី = DataLoader(ហាត្សិយុសៃថុពិ, batch_size=ចាកាពអុភាល, shuffle=True)

    # ſןᴜ ı],ɔⅎ ſᶘɜ
    for ហាតេ in ហាត្សិយុសៃផ៏តេមិនី:
        print(ហាតេ)
else:
    print("ꞁȷ̀ɔ ſ͕ɭᴎɹƽ ⺓ j͑ʃ'ɜ ſןɹ")

សិអុថុពិ = អារាហាថុពិ(ថុពិសិរអុលិមី)
សិអុផ៏តេមិនី = DataLoader(សិអុថុពិ, batch_size=ចាកាពអុភាល, shuffle=False)

# j͑ʃᴜ ı],ɔ ᶅſɔⅎ
class វេំ(nn.Module):
    def __init__(self, កេភពាល៏, ចាកអុភាល, ចាកអុភាលត្លាកាក, តុម៏នីត្លា):
        super(វេំ, self).__init__()
        
        # j͑ʃᴜ ı],ɔ ꞁȷ̀ᴜƣ̋ ꞁȷ̀ɜ ſȷᴜͷ̗
        self.embedding = nn.Embedding(កេភពាល៏, ចាកអុភាល)
        # j͑ʃᴜ ı],ɔ j͐ʃ ɭʃɜ ŋᷠэ j͑ʃᴜꞇ ſ̀ȷᴜ
        self.rnn = nn.LSTM(ចាកអុភាល, ចាកអុភាលត្លាកាក, តុម៏នីត្លា, batch_first=True)
        # j͑ʃᴜ ı],ɔ ſᶘɔⅎ }ʃꞇ j͑ʃᴜꞇ ſ̀ȷᴜ
        self.linear = nn.Linear(ចាកអុភាលត្លាកាក, កេភពាល៏)

    def forward(self, អារាង):
        # ꞁȷ̀ᴜƣ̋ ꞁȷ̀ɜ ſȷᴜͷ̗
        អារអុភាល = self.embedding(អារាង)
        # ſ̀ȷᴜ
        ត្សេំនី, _ = self.rnn(អារអុភាល)
        # ſᶘɔⅎ }ʃꞇ j͑ʃᴜꞇ ſ̀ȷᴜ 
        ត្សេំនី = self.linear(ត្សេំនី)
        return ត្សេំនី
    
    def generate(self, រឺថា, max_length=100, temperature=1.0):
        កុផុយ = None
        ក្ភិសៃ១សៃអេស្កេក = []
 
        for _ in range(max_length):
            អុចាល, កុផុយ = self.forward(រឺថា, កុផុយ)
            អុចាល /= temperature
            ហុវអុចាល = F.softmax(អុចាល[:, -1], dim=-1)
            ហុវេសៃ១សៃអេស្កេក = torch.multinomial(ហុវអុចាល, num_samples=1)
            ក្ភិសៃ១សៃអេស្កេក.append(ហុវេសៃ១សៃអេស្កេក.item())
            រឺថា = torch.cat([រឺថា, ហុវេសៃ១សៃអេស្កេក.unsqueeze(1)], dim=-1)

        return ក្ភិសៃ១សៃអេស្កេក

# ſɭʞɹ ᶅſɔⅎ
វេំ = វេំ(កេភពាល៏, ចាកអុភាល, ចាកអុភាលត្លាកាក, តុម៏នីត្លា)

# ſ̀ȷэ }ʃꞇ
អាត្សាត្ល៏ = nn.CrossEntropyLoss()
ចាផាកេមា = torch.optim.Adam(វេំ.parameters(), lr=ផ៏នអេត្សារា)

# ֭ſɭᴜ ſᶘɹ ɭl̀ɜ }ʃꞇ
for សិក៏ហ៏ in range(ហាសិក៏ហ៏):
    for ហាតេ in ហាត្សិយុសៃផ៏តេមិនី:
        សាជេសៃក្សាកា = ហាតេ

        # ꞁȷ̀ᴜ ɽ͑ʃ'ᴜ ſ̀ȷᴜ
        ត្សេំនី = វេំ(សាជេសៃក្សាកា)
        # j͑ʃᴜ ſɭᴜ j͑ʃᴜ ſ̀ȷэ
        ត្សេំនី = ត្សេំនី.view(-1, កេភពាល៏)
        សាជេសៃក្សាកា = សាជេសៃក្សាកា.view(-1)
        # ʃэc̗ ꞁȷ̀ɔ ſᶘɜ ſ̀ȷэ }ʃꞇ
        ត្ល៏នី = អាត្សាត្ល៏(ត្សេំនី, សាជេសៃក្សាកា)

        # ʃᴜ ſɭɔ ŋᷠᴜ
        ចាផាកេមា.zero_grad()
        ត្ល៏នី.backward()
        ចាផាកេមា.step()

    # j͑ʃɹƣ̋ ꞁȷ̀ɜ j͐ʃɹ ŋᷠꞇ
    វេំ.eval()
    with torch.no_grad():
        សិអុត្ល៏នី = 0
        for សិអុហាតេ in សិអុផ៏តេមិនី:
            សិអុសាជេសៃក្សាកា = សិអុហាតេ
            សិអុត្សេំនី = វេំ(សិអុសាជេសៃក្សាកា)
            សិអុត្សេំនី = សិអុត្សេំនី.view(-1, កេភពាល៏)
            សិអុសាជេសៃក្សាកា = សិអុសាជេសៃក្សាកា.view(-1)
            សិអុត្ល៏នី += អាត្សាត្ល៏(សិអុត្សេំនី, សិអុសាជេសៃក្សាកា).item()
        សិអុត្ល៏នី /= len(សិអុផ៏តេមិនី)

    print(f"<{សិក៏ហ៏+1}/{សិក៏ហ៏}> j͑ʃᴜꞇ j͑ʃɹ ſɭэ ֭ſɭэ {ត្ល៏នី.item():.4f} j͑ʃᴜꞇ ſɟɔ ֭ſɭɹ ""}"f"ʃꞇ {សិអុត្ល៏នី:.4f} j͑ʃᴜꞇ j͐ʃ j͑ʃɹƣ̋ ꞁȷ̀ɜ j͐ʃɹ ŋᷠꞇ j͑ʃᴜꞇ ſɟɔ ֭ſɭɹ ""}ʃꞇ")

    # ꞁȷ̀ɜ j͐ʃɹ ŋᷠꞇ j͑ʃᴜꞇ ᶅſɔⅎ
    if សិក៏ហ៏ == 0:
        ក្មអាកីសិអុត្ល៏នី = សិអុត្ល៏នី
    elif សិអុត្ល៏នី < ក្មអាកីសិអុត្ល៏នី:
        ក្មអាកីសិអុត្ល៏នី = សិអុត្ល៏នី
        torch.save(វេំ.state_dict(), "ꞁȷ̀ɜ j͐ʃɹ ŋᷠꞇ j͑ʃᴜꞇ ᶅſɔⅎ.pt")

# j͑ʃ'ɔ ſ̀ȷᴜȝ
អារាវេំ = "ᶅſɔⅎ.pt"
torch.save(វេំ.state_dict(), អារាវេំ)